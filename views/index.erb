<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
 <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Flot Examples</title>
    <link href="css/layout.css" rel="stylesheet" type="text/css">
    <!--[if lte IE 8]><script language="javascript" type="text/javascript" src="../excanvas.min.js"></script><![endif]-->
    <script language="javascript" type="text/javascript" src="scripts/jquery.js"></script>
    <script language="javascript" type="text/javascript" src="scripts/jquery.flot.js"></script>
	<script language="javascript" type="text/javascript" src="scripts/jquery.flot.fillbetween.js"></script>

 </head>
	<style>
		.overlay {
			border: 1px solid;
		}
		.zoom {
			text-decoration: underline;
			cursor: pointer;
		}
		.current {
			font-weight:bold;
		}
		#uploader {
			margin: 15px;
			margin-left:0px;
		}
		.upload_file {
			border: 1px solid;
			
		}
	</style>
    <body>
    <h1>Wave Plotter</h1>
	
	<div id="zoomlevel">
		<span class="plus">
			
		</span>
		<span class="minus">
			
		</span>
	</div>
    <div id="placeholder" style="width:900px;height:100px;"></div>
	<div class="density">
		<h2>Plot Density</h2>
		<span class="zoom" zoom="800">800</span> |
		<span class="zoom" zoom="1600">1,600</span> |
		<span class="zoom" zoom="3200">3,200</span> |
		<span class="zoom" zoom="4000">4,000</span> |
		<span class="zoom" zoom="8000">8,000</span> |
		<span class="zoom" zoom="20000">20,000</span> |
		<span class="zoom default" zoom="100000">100,000</span> |
		<span class="zoom" zoom="all">ALL THE MOTHER LOVING POINTS!</span>
	</div>
    <!-- <p>
          <input class="fetchSeries" type="button" value="First dataset"> -
          <a href="file_name.800.json">data</a>
          <span></span>
    	</p> -->

<script type="text/javascript">
$(document).ready(function() {
	// Onload we start with 800
	var defaultZoom = $(".default").attr("zoom");
	fetchData(defaultZoom);
	
	$(".zoom").click(function () {
		//setCurrent($(this));
		var plotpoints = $(this).attr("zoom");
		//resizeCanvas(plotpoints);
		fetchData(plotpoints);
	});
});

//function resizeCanvas(plotpoints) {
//	$("#placeholder").css('width',""+plotpoints+"px");
//	$(".base").attr('width',plotpoints);
//	$(".overlay").attr('width',plotpoints);
//}

function setCurrent($e) {
//	$(".zoom")
}



function fetchData(plotpoints) {
	//resizeCanvas(plotpoints)
	var options = {
		lines: { 
			show: true,
			//steps:0.1,
			fill: false,
			fillColor: "rgb(0,0,0)",
			lineWidth: 1
			//fillColor: "rgb(0,0,0)"
		},
		selection: { mode: "x" },
		colors: "#000000",
		shadowSize: 0,
		points: { show: false },
		xaxis: { tickDecimals: 0, tickSize: 0 },
		legend: {
			show: true,
			labelFormatter: null,// or (fn: string, series object -> string)
			labelBoxBorderColor: "rgb(255,255,255)",
			//noColumns: number
			//position: "ne" or "nw" or "se" or "sw"
			//margin: number of pixels or [x margin, y margin]
			backgroundColor: null, //or color
			backgroundOpacity: 0,
			container: null,// or jQuery object/DOM element/jQuery expression
		},
		xaxis: { show: false},
		yaxis: { show: false},
		
		grid: {
			show: false,
			color: "rgb(255,255,255)",
			backgroundColor: "rgb(255,255,255)",
			borderWidth: 0,
			borderColor: "rgb(255,255,255)"
		}
	};
	
	var data = [];
    var $placeholder = $("#placeholder");
	
	$.ajax({
        url: "sound_name" + "." + plotpoints + ".json",
        method: 'GET',
        dataType: 'json',
        success: onDataReceived
    });

	function onDataReceived(series) {
        data = [ series ];
        $.plot($placeholder, data, options);

    }
	
	
	
}


// $(function () {
// 	var options = {
// 		lines: { 
// 			show: true,
// 			//steps:0.1,
// 			fill: true,
// 			fillColor: "rgb(0,0,0)",
// 			lineWidth: 1
// 			//fillColor: "rgb(0,0,0)"
// 		},
// 		colors: "#000000",
// 		shadowSize: 0,
// 		points: { show: false },
// 		xaxis: { tickDecimals: 0, tickSize: 0 },
// 		legend: {
// 			show: true,
// 			labelFormatter: null,// or (fn: string, series object -> string)
// 			labelBoxBorderColor: "rgb(255,255,255)",
// 			//noColumns: number
// 			//position: "ne" or "nw" or "se" or "sw"
// 			//margin: number of pixels or [x margin, y margin]
// 			backgroundColor: null, //or color
// 			backgroundOpacity: 0,
// 			container: null,// or jQuery object/DOM element/jQuery expression
// 		},
// 		xaxis: { show: false},
// 		yaxis: { show: false},
// 		
// 		grid: {
// 			show: false,
// 			color: "rgb(255,255,255)",
// 			backgroundColor: "rgb(255,255,255)",
// 			borderWidth: 0,
// 			borderColor: "rgb(255,255,255)"
// 		}
// 	};
//     //var options = {
//     //    lines: { show: true, steps: 0.1, fill: false, lineWidth: 0.03, fillColor: "#000066" },
// 	//	shadowSize: 0,
// 	//	grid: { 
// 	//		backgroundColor: "rgb(248,248,255)",
// 	//		color: "rgb(248,248,255)" 
// 	//	},
//     //    points: { show: false },
//     //    xaxis: { tickDecimals: 0, tickSize: 1 }
//     //};
//     var data = [];
//     var placeholder = $("#placeholder");
//     
//     $.plot(placeholder, data, options);
// 
//     
//     // fetch one series, adding to what we got
//     var alreadyFetched = {};
//     
//     $("input.fetchSeries").click(function () {
//         var button = $(this);
//         
//         // find the URL in the link right next to us 
//         var dataurl = button.siblings('a').attr('href');
// 
//         // then fetch the data with jQuery
//         function onDataReceived(series) {
//             // extract the first coordinate pair so you can see that
//             // data is now an ordinary Javascript object
//             var firstcoordinate = '(' + series.data[0][0] + ', ' + series.data[0][1] + ')';
// 
//             button.siblings('span').text('Fetched ' + series.label + ', first point: ' + firstcoordinate);
// 
//             // let's add it to our current data
//             if (!alreadyFetched[series.label]) {
//                 alreadyFetched[series.label] = true;
//                 data.push(series);
//             }
//             
//             // and plot all we got
//             $.plot(placeholder, data, options);
//          }
//         
//         $.ajax({
//             url: dataurl,
//             method: 'GET',
//             dataType: 'json',
//             success: onDataReceived
//         });
//     });
// 
// 
//     // initiate a recurring data update
//     $("input.dataUpdate").click(function () {
//         // reset data
//         data = [];
//         alreadyFetched = {};
//         
//         $.plot(placeholder, data, options);
// 
//         var iteration = 0;
//         
//         function fetchData() {
//             ++iteration;
// 
//             function onDataReceived(series) {
//                 // we get all the data in one go, if we only got partial
//                 // data, we could merge it with what we already got
//                 data = [ series ];
//                 
//                 $.plot($("#placeholder"), data, options);
//             }
//         
//             $.ajax({
//                 // usually, we'll just call the same URL, a script
//                 // connected to a database, but in this case we only
//                 // have static example files so we need to modify the
//                 // URL
//                 url: "data-eu-gdp-growth-" + iteration + ".json",
//                 method: 'GET',
//                 dataType: 'json',
//                 success: onDataReceived
//             });
//             
//             if (iteration < 5)
//                 setTimeout(fetchData, 1000);
//             else {
//                 data = [];
//                 alreadyFetched = {};
//             }
//         }
// 
//         setTimeout(fetchData, 1000);
//     });
// });
</script>

 </body>
</html>
